/* ------------------------------------------------------------------------------
 * Copyright (c) 2012 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	modules/Firstboot.ycp
 * Package:	Configuration of firstboot
 * Summary:	Firstboot settings, input and output functions
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 *
 * Representation of the configuration of firstboot.
 * Input and output routines.
 */

{

module "Firstboot";
textdomain "firstboot";

import "NetworkInterfaces";
import "Progress";
import "Internet";
import "Misc";
import "Mode";
import "Directory";
import "ProductControl";
import "Summary";



string script_dir = "";

string no_text = _("No Text Available");

global boolean show_y2cc_checkbox = false;

global boolean language_changed = false;

// definition of firstboot sequence (and the default path)
global string firstboot_control_file	= "/etc/YaST2/firstboot.xml";

// file triggering start of firstboot sequence
global string reconfig_file		= "/var/lib/YaST2/reconfig_system";

global string default_wm = "";

global list<string> installed_desktops = [];

// for autoinstallation: should the firstboot be enbaled?
global boolean firstboot_enabled	= false;

// if some settings were modified (currently for autoyast only)
global boolean modified			= false;

global void Firstboot()
{
    if (Mode::config () || Mode::autoinst ())
    {
	y2milestone ("no firstboot initialization in mode %1", Mode::mode());
	return;
    }
    show_y2cc_checkbox = 
        Misc::SysconfigRead(.sysconfig.firstboot.SHOW_Y2CC_CHECKBOX, "no") == "yes";
    default_wm =
        Misc::SysconfigRead(.sysconfig.windowmanager.DEFAULT_WM, "kde");
    Progress::off();
    NetworkInterfaces::Read();
    Progress::on();
    Internet::do_you = true;

    string control_file	=
	Misc::SysconfigRead (.sysconfig.firstboot.FIRSTBOOT_CONTROL_FILE, "");
    if (control_file != "")
	firstboot_control_file	= control_file;

    ProductControl::custom_control_file = firstboot_control_file;

    if (!ProductControl::Init())
    {
        y2error("control file %1 not found", ProductControl::custom_control_file );
    }

    return;
}


/*
 * Execute custom scripts
 * @return boolean
 */
global boolean ExecuteScripts()
{

    script_dir = Misc::SysconfigRead(.sysconfig.firstboot.SCRIPT_DIR,
            "/usr/share/firstboot/scripts" );

    if (script_dir!="")
    {
        list<string> scripts = sort ((list<string>)SCR::Read(.target.dir, script_dir));
        foreach(string script, scripts, ``{
                map ret = (map)SCR::Execute(.target.bash_output, script_dir + "/" + script + " >> /var/log/YaST2/firstboot.log");
                if (ret["exit"]:-1 != 0)
                    y2error ("script failed: %1", ret );
                });
    } else {
        y2error("Script dir empty or not configured");
    }
    return true;
}

/**
 * Import firstboot settigs defined by autoyast
 */
global boolean Import (map settings) {

    boolean ena	= settings["firstboot_enabled"]:firstboot_enabled;
    if (ena != firstboot_enabled)
    {
	firstboot_enabled	= ena;
	modified		= true;
    }
    return modified;
}

/**
 * Export firstboot settigs defined by autoyast
 */
global map Export () {

    return $[
	"firstboot_enabled"	: firstboot_enabled
    ];
}
/**
 * Summary()
 * returns html formated configuration summary
 * @return summary
 */
global define string Summary () {
    string summary =
	// summary item
	Summary::AddHeader ("", _("Firstboot configuration disabled"));
    if (firstboot_enabled)
    {
	// summary item
	summary	= Summary::AddHeader ("", _("Firstboot configuration enabled"));
    }
    return summary;
}


/**
 * Write firstboot settings
 */
global boolean Write () {
    if (firstboot_enabled)
    {
	y2milestone ("enabling firstboot...");
	SCR::Execute (.target.bash, "/bin/touch " + reconfig_file);
    }
}

/* EOF */
}
